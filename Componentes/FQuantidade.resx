<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="panelDados1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>