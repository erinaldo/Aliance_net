<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhMgAyAKIAAPSWJ/jEif3y5vzq1Pzgv/zgwP///wAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtY
        TVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlk
        Ij8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBD
        b3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpS
        REYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4g
        PHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29t
        L3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1s
        bnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHht
        cDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlE
        PSJ4bXAuaWlkOjAzODQ1RDVGOTUyNjExREY4MTFEQkEwRThEN0ZEQTVGIiB4bXBNTTpEb2N1bWVudElE
        PSJ4bXAuZGlkOjAzODQ1RDYwOTUyNjExREY4MTFEQkEwRThEN0ZEQTVGIj4gPHhtcE1NOkRlcml2ZWRG
        cm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6MDM4NDVENUQ5NTI2MTFERjgxMURCQTBFOEQ3RkRB
        NUYiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6MDM4NDVENUU5NTI2MTFERjgxMURCQTBFOEQ3RkRB
        NUYiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBl
        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
        0VQcFvJCnPHE80ILHfX+hJuRIerNmTB8dpAAADs=
</value>
  </data>
</root>